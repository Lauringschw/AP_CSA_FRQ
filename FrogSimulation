public class FrogSimulation
{
	/** Distance, in inches, from the starting position to the goal. */
	private int goalDistance;
	
	/** Maximum number of hops allowed to reach the goal. */
	private int maxHops;
	
	/** Constructs a FrogSimulation where dist is the distance, in inches, from the starting
	* position to the goal, and numHops is the maximum number of hops allowed to reach the goal.
	* Precondition: dist > 0; numHops > 0
	*/
	public FrogSimulation(int dist, int numHops)
	{
	goalDistance = dist;
	maxHops = numHops;
	}
	
	/** Returns an integer representing the distance, in inches, to be moved when the frog hops.
	*/
	private int hopDistance()
	{ /* implementation not shown */ }
	
	/** Simulates a frog attempting to reach the goal as described in part (a).
	* Returns true if the frog successfully reached or passed the goal during the simulation;
	* false otherwise.
	*/
	public boolean simulate()
	{
		boolean bool = false; //changes in the for loop
		int add = 0; //adds hopDistance to it
		for(int i = 0; i < maxHops; i++) {  //loops till maxHops (if needed)
				add = add + hopDistance(); //adds hopDistance to add
				
				if(add >= goalDistance) { //if add is greater or equal to goalDistance
					bool = true; //bool is going to be true
					break; //stop the loop
				}
				
				if(add < 0) { //if add is in the negatives
					bool = false; //bool is going to be false
					break; //stop the loop
				}
		}
		return bool; //return what happened in the loop
	}
	
	/** Runs num simulations and returns the proportion of simulations in which the frog
	* successfully reached or passed the goal.
	* Precondition: num > 0
	*/
	public double runSimulations(int num)
	{
		int count = 0; //adds 1 to this if something is true in loop
		for(int i = 0; i < num; i++) { //runs as long as parameter given
			if(simulate() == true) { //if simulate is true
				count++; //count 1
			}
		}
		return (double)count / (double)num; //return count divided by num
	}
}
