public class Hailstone
{
	
	/** Returns the length of a hailstone sequence that starts with n,
	* as described in part (a).
	* Precondition: n > 0
	*/
	public static int hailstoneLength(int n)
	{
		int count = 1; //counts how many times it changes
		int number = n; 
		while(number > 1) { //while number is above 1
			if(number == 1) { //if number is equal to 1
				return 1; //return 1
			}
			
			if(number % 2 == 0) { //if number divided by 2 has a remainder of 0 (EVEN)
				number = number/2; //number will equal to number / 2
				count++; //add 1 to counter;
			}
			
			if(number % 2 != 0) { //if number divided by 2 doesn't have a remainder of 0 (ODD)
				number = (number * 3) + 1; // number will be equal to number times 3 plus 1
				count++; //add 1 to counter;
			}
		} //while
		return count;
	}
	
	  /** Returns true if the hailstone sequence that starts with n is considered long
	* and false otherwise, as described in part (b).
	* Precondition: n > 0
	*/
	public static boolean isLongSeq(int n)
	{
		if(hailstoneLength(n) > n){ //if hailstone's sequance length is greater than the starting hailstone
			return true; //return true
		} else {
			return false;//otherwise return false
		}
	}
	
	  /** Returns the proportion of the first n hailstone sequences that are considered long,
	* as described in part (c).
	* Precondition: n > 0
	*/
	public static double propLong(int n)
	{
		int fact = 0; //count how many are true
		for(int i = 1; i <= n; i++) { //loops from 1 to n (inclusive)
			if(isLongSeq(i) == true) { //if 'i' is long 
				fact++; //add 1 to fact
			}//if
		}//for
		return (double)fact / (double)n; //finding the ratio
	}//method
	 // There may be instance variables, constructors, and methods not shown.
}
