public class HorseBarn
	{
	/** The spaces in the barn. Each array element holds a reference to the horse
	* that is currently occupying the space. A null value indicates an empty space.
	*/
	private Horse[] spaces;
	
	/** Returns the index of the space that contains the horse with the specified name.
	* Precondition: No two horses in the barn have the same name.
	* @param name the name of the horse to find
	* @return the index of the space containing the horse with the specified name;
	* -1 if no horse with the specified name is in the barn.
	*/
	public int findHorseSpace(String name)
	{
		int index = -1; //index of where horse is, if nothing found, -1 will be returned
		for(int i = 0; i < spaces.length; i++) {
			if(spaces[i].getName().equals(name)) { //if name of space at i is equal to name
				index = i; //change number to index of name
			}//if
		}//loop
		return index; //return index of name
	}//method
	
	/** Consolidates the barn by moving horses so that the horses are in adjacent spaces,
	* starting at index 0, with no empty space between any two horses.
	* Postcondition: The order of the horses is the same as before the consolidation.
	*/
	public void consolidate() //no return type
	{
		Horse[] newSpaces = new Horse[spaces.length];
		int e = 0; //adds 1 if null isn't found
		for(int i = 0; i < spaces.length; i++) { //loop that runs through entire spaces 
			if(spaces[i] != null) { //ig spaces at i isn't null
				newSpaces[e] = spaces[i]; //add spaces at i to newSpaces
				e++; //add 1 to e
			}//if
		}//loop
		spaces = newSpaces; //spaces is newSpaces
	}//method
}//class
