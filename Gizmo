import java.util.ArrayList;

public class Gizmo
{
	/** Returns the name of the manufacturer of this Gizmo. */
	public String getMaker()
	{ /* implementation not shown */ }
	
	/** Returns true if this Gizmo is electronic, and false
	otherwise.
	*/
	public boolean isElectronic()
	{ /* implementation not shown */ }
	
	/** Returns true if this Gizmo is equivalent to the Gizmo
	object
	* represented by the parameter, and false otherwise.
	*/
	public boolean equals(Object other)
	{ /* implementation not shown */ }
	
	// There may be instance variables, constructors, and methods not shown.
}

public class OnlinePurchaseManager
{
	/** An ArrayList of purchased Gizmo objects,
	instantiated in the constructor. */
	private ArrayList<Gizmo> purchases;
	
	/** Returns the number of purchased Gizmo objects that are
	electronic and are
	* manufactured by maker, as described in part (a).
	*/
	public int countElectronicsByMaker(String maker)
	{
		int count = 0; //counter 
		for(int i = 0; i < purchases.size(); i++) { //loops through entire purchases arrayList
			if(purchases.get(i).isElectronic() == true && purchases.get(i).getMaker() == maker) {
				count++; //count will increase by 1
			}
		}
		return count; //return count
	}
	
	/** Returns true if any pair of adjacent purchased Gizmo
	objects are equivalent, and
	* false otherwise, as described in part (b).
	*/
	public boolean hasAdjacentEqualPair()
	{
		if(purchases.size() < 2) { //if purchases's length is less than 2
			return false; //return false
		}
		
		for(int i = 1; i < purchases.size()-1; i++) { //starts at 1 and goes to purchases length -1
			if(purchases.get(i).equals(purchases.get(i+1))  //if purchases i object is equal to purchases i+1 object 
					|| purchases.get(i-1).equals(purchases.get(i))) { //or if purchases i-1 object is equal to purchases i object 
				return true; //it will return true
			}
		}
		return false; //if nothing is found it will return false
	}
	
	// There may be instance variables, constructors, and methods not shown.
}
